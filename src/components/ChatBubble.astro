<div class="toast toast-end" id="chat-box-container">
  <!-- Modal de chat -->
  <div class="bg-base-100 shadow-xl rounded-lg p-4 h-96 w-full max-w-lg flex flex-col hidden" id="chat-box">
    <h2 class="text-xl font-bold mb-4">🚀 Chat with us! 
      <span id="close-button" class="absolute top-0 right-0 badge badge-accent p-2 cursor-pointer">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </span>
    </h2>

    <!-- Contenedor del chat con scroll vertical y sin scroll horizontal -->
    <div id="chat-container" class="overflow-y-auto flex-grow space-y-2 pr-2" style="max-height: 240px; overflow-x:hidden;">
      <div class="chat chat-start">
        <div class="chat-bubble chat-bubble-primary w-full lg:max-w-[90%] break-words whitespace-normal text-left">
          ¡Hola! Si estás buscando digitalizar tu negocio o necesitas asesoría en software en la nube, estamos aquí para ayudarte. Escríbenos en el chat y hablemos sobre cómo podemos apoyar la transformación digital de tu empresa.
        </div>
      </div>  
    </div>
  
    <!-- Acciones debajo del chat con input de texto -->
    <div id="chat-controls" class="mt-4 flex items-center">
      <input id="chat-input" type="text" placeholder="Type your message..." class="input input-bordered w-full mr-2" />
      <button id="send-button" class="btn btn-primary">
        <svg id="send-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.5 3L21 12m0 0L10.5 21M21 12H3" />
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Contenido por defecto -->
<div class="toast toast-end" id="default-view">
    <span id="dynamic-message" class="indicator-item badge badge-accent">🚀 work with us</span>
    <button id="open-chat" class="btn btn-xs btn-outline btn-accent sm:btn-sm md:btn-md lg:btn-lg">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h8m-4 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
      </svg>
    </button>
</div>

<script>
  let userResponded = false; // Variable para rastrear si el usuario ya ha respondido

  // Función para cerrar el chat y mostrar el contenido por defecto
  function closeChat() {
    const chatBox = document.getElementById('chat-box');
    const defaultView = document.getElementById('default-view');

    chatBox.classList.add('hidden');  // Ocultar el modal de chat
    defaultView.classList.remove('hidden');  // Mostrar el contenido por defecto
  }

  // Función para abrir el chat desde el contenido por defecto o automáticamente
  function openChat() {
    const chatBox = document.getElementById('chat-box');
    const defaultView = document.getElementById('default-view');

    chatBox.classList.remove('hidden');  // Mostrar el modal de chat
    defaultView.classList.add('hidden');  // Ocultar el contenido por defecto
  }

  // Mostrar el modal automáticamente después de 5 segundos al cargar la página
  window.onload = function() {
    setTimeout(() => {
      openChat(); // Mostrar el chat después de 5 segundos
    }, 5000); // 5000 milisegundos = 5 segundos
  }

  // Añadir funcionalidad al botón de cerrar
  const closeButton = document.getElementById('close-button');
  closeButton.addEventListener('click', closeChat);

  // Añadir funcionalidad al botón de abrir chat
  const openChatButton = document.getElementById('open-chat');
  openChatButton.addEventListener('click', openChat);

  // Función para añadir un nuevo mensaje al chat
  function addMessageToChat(message, isUser = true) {
    const chatContainer = document.getElementById('chat-container');
    const newBubble = document.createElement('div');
    newBubble.classList.add('chat', isUser ? 'chat-end' : 'chat-start');
    newBubble.innerHTML = `
      <div class="chat-bubble ${isUser ? 'chat-bubble-info' : 'chat-bubble-primary'} w-full lg:max-w-[90%] break-words whitespace-normal text-left">
        ${message}
      </div>
    `;
    chatContainer.appendChild(newBubble);
    chatContainer.scrollTop = chatContainer.scrollHeight; // Desplazar el chat hacia el final
  }

  // Función para enviar el mensaje solo si el campo de texto no está vacío
  function sendMessage() {
    const chatInput = document.getElementById('chat-input');
    const message = chatInput.value.trim();
    if (message) {
      addMessageToChat(message);  // Añadir el mensaje del usuario
      chatInput.value = '';  // Limpiar el campo de entrada
      clearTimeout(autoMessageTimeout);  // Cancelar el mensaje automático
      userResponded = true;  // Marcar que el usuario ha respondido

      // Deshabilitar el campo de entrada y cambiar el placeholder
      chatInput.disabled = true;
      chatInput.placeholder = 'Esperando respuesta...';

      // Cambiar el ícono de enviar por un ícono de "stop"
      const sendIcon = document.getElementById('send-icon');
      sendIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      `;

      // Añadir funcionalidad de "stop" al botón de enviar
      sendButton.removeEventListener('click', sendMessage);
      sendButton.addEventListener('click', stopInteraction);
    }
  }

  // Función para manejar la interacción de "Stop"
  function stopInteraction() {
    addMessageToChat("Interacción detenida. Puedes enviar otro mensaje.", false);

    const chatInput = document.getElementById('chat-input');
    chatInput.disabled = false;
    chatInput.placeholder = 'Type your message...';

    const sendIcon = document.getElementById('send-icon');
    sendIcon.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.5 3L21 12m0 0L10.5 21M21 12H3" />
      </svg>
    `;

    sendButton.removeEventListener('click', stopInteraction);
    sendButton.addEventListener('click', sendMessage);
  }

  // Añadir funcionalidad al botón de enviar
  const sendButton = document.getElementById('send-button');
  const chatInput = document.getElementById('chat-input');

  sendButton.addEventListener('click', sendMessage);

  // Añadir funcionalidad al presionar Enter
  chatInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
      sendMessage();
    }
  });

  // Temporizador para el segundo mensaje
  const autoMessageTimeout = setTimeout(() => {
    if (!userResponded) {
      addMessageToChat("¿Te parece si nos cuentas sobre tu proyecto por este medio para que podamos entender mejor de qué se trata?", false);
    }
  }, 20000);

  // Funcionalidad para cambiar el texto dinámico en el botón
  const messages = ["🚀 work with us", "💬 chat with us", "📖 learn with us", "🤖 need help?"];
  let index = 0;

  setInterval(() => {
    const messageElement = document.getElementById("dynamic-message");
    index = (index + 1) % messages.length;
    messageElement.textContent = messages[index];
  }, 2300);
</script>
