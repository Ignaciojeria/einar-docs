<div class="toast toast-end" id="chat-box-container">
  <!-- Modal de chat -->
  <div class="bg-base-100 shadow-xl rounded-lg p-4 h-100 w-full max-w-lg flex flex-col hidden" id="chat-box">
    <h2 class="text-xl font-bold mb-4">ğŸš€ Chat with us! <div class="badge badge-primary">powered by einar ğŸš€</div>
      <span id="close-button" class="absolute top-0 right-0 badge badge-accent p-2 cursor-pointer">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </span>
    </h2>


    
<!-- Contenedor del chat con scroll vertical y sin scroll horizontal -->
<div id="chat-container" class="overflow-y-auto flex-grow space-y-2 pr-2" style="max-height: 300px; overflow-x:hidden;">
  <div class="chat chat-start mt-2">
    <div class="chat-bubble chat-bubble-primary w-full lg:max-w-[100%] break-words whitespace-normal text-left">
      <p>Â¡Bienvenido/a! Estamos aquÃ­ para ayudarte a llevar tu negocio al siguiente nivel con nuestras soluciones digitales. </p>
      <p class="mb-1 font-medium">AquÃ­ hay algunas cosas con las que podemos ayudarte:</p>
      <ul class="list-disc list-inside space-y-0.5">
        <li>ğŸ›  <span>ConstrucciÃ³n de productos digitales</span></li>
        <li>ğŸ”„ <span>MigraciÃ³n de productos digitales</span></li>
        <li>ğŸ¤– <span>Implementa nuestro ChatBot en tu sitio</span></li>
      </ul>
      <p class="mt-2">Â¿CuÃ¡l te interesa mÃ¡s?</p>
    </div>
  </div>
</div>

  
    <!-- Acciones debajo del chat con input de texto -->
    <div id="chat-controls" class="mt-4 flex items-center">
      <input id="chat-input" type="text" placeholder="Type your message..." class="input input-bordered w-full mr-2" />
      <button id="send-button" class="btn btn-primary">
        <svg id="send-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.5 3L21 12m0 0L10.5 21M21 12H3" />
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Contenido por defecto -->
<div class="toast toast-end" id="default-view">
    <span id="dynamic-message" class="indicator-item badge badge-accent">ğŸš€ work with us</span>
    <button id="open-chat" class="btn btn-xs btn-outline btn-accent sm:btn-sm md:btn-md lg:btn-lg">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h8m-4 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
      </svg>
    </button>
</div>

<script>
  var chatTracePropagatorVar = {
    "traceparent":""
  }
  var strategy:string = "HowToHelp"
  var context:string = "Â¡Bienvenido/a! Estamos aquÃ­ para ayudarte a llevar tu negocio al siguiente nivel con nuestras soluciones digitales.\nAquÃ­ hay algunas cosas con las que podemos ayudarte:\nğŸ›  ConstrucciÃ³n de productos digitales\nğŸ”„ MigraciÃ³n de productos digitales\nğŸ›  IntegraciÃ³n de productos digitales\nğŸ¤– Implementa nuestro ChatBot en tu sitio\nÂ¿CuÃ¡l te interesa mÃ¡s?"
  let userResponded = false; // Variable para rastrear si el usuario ya ha respondido

  // FunciÃ³n para cerrar el chat y mostrar el contenido por defecto
  function closeChat() {
    const chatBox = document.getElementById('chat-box');
    const defaultView = document.getElementById('default-view');

    chatBox.classList.add('hidden');  // Ocultar el modal de chat
    defaultView.classList.remove('hidden');  // Mostrar el contenido por defecto
  }

  // FunciÃ³n para abrir el chat desde el contenido por defecto o automÃ¡ticamente
  function openChat() {
    const chatBox = document.getElementById('chat-box');
    const defaultView = document.getElementById('default-view');

    chatBox.classList.remove('hidden');  // Mostrar el modal de chat
    defaultView.classList.add('hidden');  // Ocultar el contenido por defecto
  }

  // Mostrar el modal automÃ¡ticamente despuÃ©s de 5 segundos al cargar la pÃ¡gina
  window.onload = function() {
    setTimeout(() => {
      openChat(); // Mostrar el chat despuÃ©s de 5 segundos
    }, 5000); // 5000 milisegundos = 5 segundos
  }

  // AÃ±adir funcionalidad al botÃ³n de cerrar
  const closeButton = document.getElementById('close-button');
  closeButton.addEventListener('click', closeChat);

  // AÃ±adir funcionalidad al botÃ³n de abrir chat
  const openChatButton = document.getElementById('open-chat');
  openChatButton.addEventListener('click', openChat);

  // FunciÃ³n para aÃ±adir un nuevo mensaje al chat
  function addMessageToChat(message, isUser = true) {
    const chatContainer = document.getElementById('chat-container');
    const newBubble = document.createElement('div');
    newBubble.classList.add('chat', isUser ? 'chat-end' : 'chat-start');
    newBubble.innerHTML = `
      <div class="chat-bubble ${isUser ? 'chat-bubble-info' : 'chat-bubble-primary'} w-full lg:max-w-[90%] break-words whitespace-normal text-left">
        ${message}
      </div>
    `;
    chatContainer.appendChild(newBubble);
    chatContainer.scrollTop = chatContainer.scrollHeight; // Desplazar el chat hacia el final
  }

  // FunciÃ³n para enviar el mensaje solo si el campo de texto no estÃ¡ vacÃ­o
  function sendMessage() {
  const chatInput: any = document.getElementById('chat-input');
  const message = chatInput.value.trim();
  if (message) {
    // AÃ±adir el mensaje del usuario al chat
    addMessageToChat(message);
    chatInput.value = ''; // Limpiar el campo de entrada
    chatInput.disabled = true; // Deshabilitar el campo de entrada
    chatInput.placeholder = 'Esperando respuesta...';

    // Realizar la solicitud HTTP POST al API
    let host ='https://einar-5chcbovkta-uc.a.run.app'
   // let host ='http://localhost'
    fetch(host+'/chat-message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      
      body: JSON.stringify({ 
        chatTracePropagator:chatTracePropagatorVar,
        promptStrategy: strategy,
        contentContext: context,
        content: message 
      })
    })
    .then(response => response.json())
    .then((data: any) => {
      // AÃ±adir la respuesta del API al chat
      if (data && data.response) {
        addMessageToChat(data.response, false);
        strategy = data.promptStrategy
        context = data.response
        chatTracePropagatorVar = data.chatTracePropagator
      } else {
        addMessageToChat("Lo siento, no pude obtener una respuesta. IntÃ©ntalo de nuevo mÃ¡s tarde.", false);
      }
    })
    .catch((error: any) => {
      console.error('Error:', error);
      addMessageToChat("Hubo un problema al conectar con el servidor. IntÃ©ntalo de nuevo mÃ¡s tarde.", false);
    })
    .finally(() => {
      // Habilitar el campo de entrada nuevamente
      chatInput.disabled = false;
      chatInput.placeholder = 'Type your message...';
    });
  }
}
  // FunciÃ³n para manejar la interacciÃ³n de "Stop"
  function stopInteraction() {
    addMessageToChat("InteracciÃ³n detenida. Puedes enviar otro mensaje.", false);

    const chatInput:any = document.getElementById('chat-input');
    chatInput.disabled = false;
    chatInput.placeholder = 'Type your message...';

    const sendIcon = document.getElementById('send-icon');
    sendIcon.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.5 3L21 12m0 0L10.5 21M21 12H3" />
      </svg>
    `;

    sendButton.removeEventListener('click', stopInteraction);
    sendButton.addEventListener('click', sendMessage);
  }

  // AÃ±adir funcionalidad al botÃ³n de enviar
  const sendButton = document.getElementById('send-button');
  const chatInput = document.getElementById('chat-input');

  sendButton.addEventListener('click', sendMessage);

  // AÃ±adir funcionalidad al presionar Enter
  chatInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
      sendMessage();
    }
  });

  // Temporizador para el segundo mensaje
  /*
  const autoMessageTimeout = setTimeout(() => {
    if (!userResponded) {
      addMessageToChat("Â¿Te parece si nos cuentas sobre tu proyecto por este medio para que podamos entender mejor de quÃ© se trata?", false);
    }
  }, 1000);
  */

  // Funcionalidad para cambiar el texto dinÃ¡mico en el botÃ³n
  const messages = ["ğŸš€ work with us", "ğŸ’¬ chat with us", "ğŸ“– learn with us", "ğŸ¤– need help?"];
  let index = 0;

  setInterval(() => {
    const messageElement = document.getElementById("dynamic-message");
    index = (index + 1) % messages.length;
    messageElement.textContent = messages[index];
  }, 2300);


  const chatContainer = document.getElementById('chat-container');
  chatContainer.scrollTop = chatContainer.scrollHeight;

</script>
